use std::{
    env,
    fs::File,
    io::{
        BufWriter,
        Write,
    },
    path::Path,
};

use anyhow::Context;

#[path = "src/definition.rs"]
mod schema;

fn main() -> anyhow::Result<()> {
    let mut schema = File::open("./cs2_schema.json").context("failed to open cs2_schema.json")?;
    let schema_scopes = serde_json::from_reader::<_, Vec<schema::SchemaScope>>(&mut schema)
        .context("failed to parse schema")?;

    let out_dir = env::var_os("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("cs2_schema.rs");
    let output = File::options()
        .create(true)
        .truncate(true)
        .write(true)
        .open(dest_path)
        .context("failed to create cs2_schema.rs")?;

    let mut writer = BufWriter::new(output);
    writeln!(&mut writer, "/* Autogenerated schema offsets */")?;
    for scope in schema_scopes {
        scope.emit_rust_definition(&mut writer)?;
    }

    println!("cargo:rerun-if-changed=cs2_schema.json");
    Ok(())
}
